generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  person_id     Int
  refreshTokens RefreshToken[]
  person        Persons        @relation(fields: [person_id], references: [person_id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TillsTypes {
  id          Int       @id @default(autoincrement())
  t_type_desc String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Tills       Tills[]
}

model TillDetails {
  id              Int         @id @default(autoincrement())
  till_id         Int
  person_id       Int
  till_det_type   Boolean
  till_det_desc   String
  till_det_amount Float
  till_det_date   DateTime
  createdAt       DateTime    @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime    @updatedAt
  account_p_id    Int
  accountplan     AccountPlan @relation(fields: [account_p_id], references: [id])
  person          Persons     @relation(fields: [person_id], references: [person_id])
  till            Tills       @relation(fields: [till_id], references: [id])
}

model DetailsTransfer {
  id                  Int       @id @default(autoincrement())
  origin_till_id      Int
  destiny_till_id     Int
  det_transfer_amount Int
  det_transfer_obs    String
  det_transfer_date   DateTime  @db.Date
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  destiny             Tills     @relation("DestinyTills", fields: [destiny_till_id], references: [id])
  origin              Tills     @relation("OriginTills", fields: [origin_till_id], references: [id])
}

model AccountPlan {
  id           Int           @id @default(autoincrement())
  account_pid  Int
  account_desc String        @unique
  account_code String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  TillDetails  TillDetails[]
}

model Tills {
  id                  Int               @id @default(autoincrement())
  person_id           Int
  t_type_id           Int
  TILL_NAME           String
  TILL_ACCOUNT_NUMBER String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
  destinyDetails      DetailsTransfer[] @relation("DestinyTills")
  originDetails       DetailsTransfer[] @relation("OriginTills")
  TillDetails         TillDetails[]
  person              Persons           @relation(fields: [person_id], references: [person_id])
  tilltype            TillsTypes        @relation(fields: [t_type_id], references: [id])
}

model Persons {
  person_id       Int           @id @default(autoincrement())
  person_fname    String
  person_lname    String
  person_idnumber String
  birthDate       DateTime      @db.Date
  p_type_id       Int
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime      @updatedAt
  person_photo    String?
  persontype      PersonTypes   @relation(fields: [p_type_id], references: [id])
  TillDetails     TillDetails[]
  Tills           Tills[]
  User            User[]
}

model PersonTypes {
  id          Int       @id @default(autoincrement())
  p_type_desc String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  Persons     Persons[]
}
